#include <linux/module.h>
#include <linux/types.h>
#include <linux/kernel.h>
#include <linux/string.h>
#include <linux/errno.h>
#include <linux/slab.h>

#include <linux/net.h>
#include <linux/socket.h>
#include <linux/sockios.h>
#include <linux/in.h>
#include <linux/its.h>
#include <linux/itsdevice.h>
#include <linux/netdevice.h>
#include <linux/etherdevice.h>

#include <net/ip.h>
#include <net/protocol.h>
#include <net/route.h>
#include <linux/skbuff.h>
#include <net/sock.h>
#include <net/raw.h>
#include <net/checksum.h>
#include <linux/netfilter_ipv4.h>
#include <net/xfrm.h>
#include <linux/mroute.h>
#include <linux/netlink.h>

#include "geo.h"
#define GEO_BASIC_HEADER_LEN 32
#define GEO_COMMON_HEADER_LEN 64

int geo_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
{
		unsigned char * ghdr;

		int len;
		int err;

		//printk("GEO_DEBUG: geo_rcv before skb -> %d\n", skb->len);
		if(skb->pkt_type == PACKET_OTHERHOST){
				printk(KERN_NOTICE"GEO_DEBUG: geo_rcv: packet is to other host\n") 
				goto drop;
		}

		if(!pskb_may_pull(skb, sizeof(struct ghdr))){
				printk(KERN_NOTICE"GEO_DEBUG: geo_rcv: packet is too short\n")
				goto drop;
		}

		if((skb = skb_share_check(skb, GEP_ATOMIC)) = NULL)
				goto out;

		skb_reset_network_header(skb);//set pointer to header

		if(ghdr->gbhdr->version != itsGnProtocolVersion){
				printk(KERN_NOTICE"GEO_DEBUG: geo_rcv: wrong geo version\n");
				goto drop;
		}
		len = nthos(sizeof(struct ghdr) + ghdr->gchdr->pl);
		//total len of geo->packet, pl = payload


drop:
		kfree_skb(skb);
out:
		return NET_RX_DROP;







